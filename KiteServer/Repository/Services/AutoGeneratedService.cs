using Domain.Aggregate;
using Microsoft.Extensions.Configuration;
using System.Reflection;

namespace Repository.Services
{
    /// <summary>
    /// 自动建表服务
    /// </summary>
    public class AutoGeneratedService
    {
        private readonly SqlSugarScope _db;
        private readonly IConfiguration _configuration;

        public AutoGeneratedService(SqlSugarScope db, IConfiguration configuration)
        {
            _db = db;
            _configuration = configuration;
        }

        /// <summary>
        /// 自动建表
        /// </summary>
        public void InitTables()
        {
            // 获取所有实现了IAutoGenerated接口的类型
            var types = GetAutoGeneratedTypes();
            if (types.Any())
            {
                // 检查是否需要重新创建数据库
                bool recreateDatabase = _configuration.GetValue<bool>("SeedData:RecreateDatabase", false);
                
                if (recreateDatabase)
                {
                    Console.WriteLine("正在删除所有表...");
                    // 获取所有表名
                    var tableNames = types.Select(t => _db.EntityMaintenance.GetEntityInfo(t).DbTableName).ToArray();
                    
                    // 获取数据库中已存在的表
                    var existingTables = _db.DbMaintenance.GetTableInfoList().Select(t => t.Name).ToArray();
                    
                    // 只删除已存在的表
                    var tablesToDrop = tableNames.Where(t => existingTables.Contains(t)).ToArray();
                    if (tablesToDrop.Any())
                    {
                        _db.DbMaintenance.DropTable(tablesToDrop);
                        Console.WriteLine($"已删除 {tablesToDrop.Length} 个表，准备重新创建...");
                    }
                    else
                    {
                        Console.WriteLine("没有需要删除的表，将直接创建新表...");
                    }
                }
                
                // 使用SqlSugar的CodeFirst功能创建表
                _db.CodeFirst.InitTables(types.ToArray());
                Console.WriteLine("表结构初始化完成");
            }
        }

        /// <summary>
        /// 获取所有实现了IAutoGenerated接口的类型
        /// </summary>
        private List<Type> GetAutoGeneratedTypes()
        {
            var autoGeneratedTypes = new List<Type>();
            
            // 获取所有程序集
            var assemblies = AppDomain.CurrentDomain.GetAssemblies();
            
            foreach (var assembly in assemblies)
            {
                try
                {
                    // 获取程序集中所有类型
                    var types = assembly.GetTypes();
                    
                    // 筛选出实现了IAutoGenerated接口的类型
                    var filteredTypes = types.Where(t => 
                        t.IsClass && 
                        !t.IsAbstract && 
                        typeof(IAutoGenerated).IsAssignableFrom(t));
                    
                    autoGeneratedTypes.AddRange(filteredTypes);
                }
                catch (ReflectionTypeLoadException ex)
                {
                    // 处理加载类型时可能出现的异常
                    var loadableTypes = ex.Types.Where(t => t != null);
                    var filteredTypes = loadableTypes.Where(t => 
                        t.IsClass && 
                        !t.IsAbstract && 
                        typeof(IAutoGenerated).IsAssignableFrom(t));
                    
                    autoGeneratedTypes.AddRange(filteredTypes);
                }
                catch
                {
                    // 忽略其他异常
                }
            }
            
            return autoGeneratedTypes;
        }
    }
}
